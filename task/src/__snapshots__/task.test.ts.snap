// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Integration Test should add comments to a pr that already has some 1`] = `
[MockFunction] {
  "calls": [
    [
      0,
      "All comments have been added",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should add comments to a pr that already has some 2`] = `
[MockFunction] {
  "calls": [
    [
      {
        "comments": [
          {
            "content": "new comment one",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
    [
      {
        "comments": [
          {
            "content": "new comment two",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should add comments to a pr that has none 1`] = `
[MockFunction] {
  "calls": [
    [
      0,
      "All comments have been added",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should add comments to a pr that has none 2`] = `
[MockFunction] {
  "calls": [
    [
      {
        "comments": [
          {
            "content": "comment one",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
    [
      {
        "comments": [
          {
            "content": "comment two",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should fail because no comments were provided 1`] = `
[MockFunction] {
  "calls": [
    [
      2,
      "comments must be provided",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should fail because no comments were provided 2`] = `[MockFunction]`;

exports[`Integration Test should ignore a comment that already exists and add the rest 1`] = `
[MockFunction] {
  "calls": [
    [
      0,
      "All comments have been added",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should ignore a comment that already exists and add the rest 2`] = `
[MockFunction] {
  "calls": [
    [
      {
        "comments": [
          {
            "content": "new comment two",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should skip comments that are just whitespace 1`] = `
[MockFunction] {
  "calls": [
    [
      0,
      "All comments have been added",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should skip comments that are just whitespace 2`] = `
[MockFunction] {
  "calls": [
    [
      {
        "comments": [
          {
            "content": "comment one",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
    [
      {
        "comments": [
          {
            "content": "comment two",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should use provided newCommentDelimiter to split comments 1`] = `
[MockFunction] {
  "calls": [
    [
      0,
      "All comments have been added",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Integration Test should use provided newCommentDelimiter to split comments 2`] = `
[MockFunction] {
  "calls": [
    [
      {
        "comments": [
          {
            "content": "comment one",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
    [
      {
        "comments": [
          {
            "content": "comment   
  two",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
    [
      {
        "comments": [
          {
            "content": "comment

three",
          },
        ],
        "status": 1,
      },
      "some-repo",
      123456,
      "team-project",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;
